train %>% ggplot(aes(x=Street,y=log(SalePrice))) + geom_col(aes(fill = Street))
train %>% ggplot(aes(x=Street,y=SalePrice)) + geom_col(aes(fill = Street))
train %>% ggplot(aes(x=Street,y=log(SalePrice))) + geom_col(aes(fill = Street))
train %>% ggplot(aes(x=Street)) + geom_bar(aes(fill = Street))
train %>% ggplot(aes(x=YrSold)) + geom_bar(aes(fill = YrSold))
train %>% ggplot(aes(x=Street)) + geom_bar(aes(fill = Street))
train %>% ggplot(aes(x=LotArea,y=SalePrice)) + geom_point()
train %>% ggplot(aes(x=LotArea,y=log(SalePrice))) + geom_point()
train %>% ggplot(aes(x=log(LotArea),y=log(SalePrice))) + geom_point()
train %>% ggplot(aes(x=log(LotArea),y=SalePrice)) + geom_point()
train %>% ggplot(aes(x=log(LotArea),y=log(SalePrice))) + geom_point()
train %>% ggplot(aes(x=log(LotArea),y=log(SalePrice))) + geom_jitter()
summary(train$LotArea)
log(1300)
log(5000)
log(9000)
log(11000)
log(21000)
train %>% ggplot(aes(x=LotArea,y=SalePrice)) + geom_point()
train %>% ggplot(aes(x=LotFrontage,y=SalePrice)) + geom_point()
train %>% ggplot(aes(x=LotFrontage,y=SalePrice)) + geom_smooth()
train %>% ggplot(aes(x=LotFrontage,y=SalePrice)) + geom_smooth(se = FALSE)
train %>% ggplot(aes(x=LotFrontage,y=SalePrice)) + geom_smooth(se = FALSE,method = lm)
train %>% ggplot(aes(x=LotArea,y=SalePrice)) + geom_point()
train %>% ggplot(aes(x=LotArea,y=SalePrice)) + geom_smooth()
train %>% ggplot(aes(x=LotArea,y=SalePrice)) + geom_smooth(method = lm)
train %>% ggplot(aes(x=LotFrontage,y=SalePrice)) + geom_smooth(se = FALSE)
train %>% ggplot(aes(x=LotArea,y=SalePrice)) + geom_point()
train %>% ggplot(aes(x=MSSubClass,y=SalePrice)) + geom_point()
train %>% ggplot(aes(x=MSSubClass,y=log(SalePrice))) + geom_point()
train %>% ggplot(aes(x=HouseStyle,y=log(SalePrice))) + geom_point()
train %>% ggplot(aes(x=OverallQual,y=log(SalePrice))) + geom_point()
train %>% ggplot(aes(x=OverallQual,y=log(SalePrice))) + geom_col()
train %>% ggplot(aes(x=OverallQual,y=SalePrice)) + geom_col()
train %>% ggplot(aes(x=OverallQual,y=SalePrice)) + geom_col(aes(fill = OverallQual))
train %>% ggplot(aes(x=OverallQual,y=SalePrice)) + geom_point()
train %>% ggplot(aes(x=OverallQual,y=SalePrice)) + geom_point(aes(size = LotArea))
train %>% ggplot(aes(x=OverallQual,y=SalePrice)) + geom_point(aes(size = LotArea,col = LotArea))
train %>% ggplot(aes(x=LotArea,y=SalePrice)) + geom_point()
train %>% ggplot(aes(x=LotArea,y=SalePrice)) + geom_point(aes(size = LotArea))
train %>% ggplot(aes(x=log(LotArea),y=SalePrice)) + geom_point(aes(size = LotArea))
train %>% ggplot(aes(x=LotArea,y=SalePrice)) + geom_point(aes(size = LotArea))
summary(train$LandSlope)
glimpse(train$LandSlope)
unique(train$LandSlope)
train %>% ggplot(aes(x=LandSlope,y=SalePrice)) + geom_point()
train %>% ggplot(aes(x=LandSlope,y=SalePrice)) + geom_col()
lapply(train,sum(is.na()))
class(train)
lapply(train,is.na())
map(.x = train,.f = is.na())
map(.x = train,.f = is.na
)
map(.x = train,.f = sum(is.na))
sum(map(.x = train,.f = is.na))
lapply(train,is.na)
naData <- lapply(train,is.na)
naData[1]
naData[[1]]
naData[[1]][1]
naData[[1]][[1]]
names(train)
names(naData)
naDatasum <- lapply(naData, sum)
naDatasum
naDatasum <- sapply(naData, sum)
naDatasum
nrow(train)
naDatasum/nrow(train)
nadataPer <- naDatasum/nrow(train)*100
arrange(desc(nadataPer))
arrange(nadataPer)
arrange(.data = nadataPer,... = desc())
arrange(.data = nadataPer,... = desc(nadataPer))
order(nadataPer)
nadataPer[order(nadataPer)]
head(train$FireplaceQu)
train %>% ggplot(aes(x=FireplaceQu,y=SalePrice)) + geom_col(aes(fill = FireplaceQu))
train %>% ggplot(aes(x=Fence,y=SalePrice)) + geom_col(aes(fill = Fence))
train %>% ggplot(aes(x=FireplaceQu,y=SalePrice)) + geom_col(aes(fill = FireplaceQu))
train %>% ggplot(aes(x=GarageType,y=SalePrice)) + geom_col(aes(fill = GarageType))
head(train[,1:6])
library(tidyverse)
head(train[,1:6]) %>% arrange(MSSubClass)
head(train[,1:6]) %>% arrange(desc(MSSubClass))
nadataPer[order(nadataPer)]
head(nadataPer[order(nadataPer)])
tail(nadataPer[order(nadataPer)])
rev(nadataPer[order(nadataPer)])
head(train[,1:10])
head(test[,1:10])
dim(train)
dim(test)
demoFun <- function(x,y){x+y}
demoFun(2,4)
demoFun(2)
demoFun <- function(x,y=0){x+y}
demoFun(2)
demoFun(2,4)
x
dim(train)
dim(train)[2]
dim(train)[2]-1
View(train[,1:dim(train)[2]-1])
train[1:10,"SaleType"]
View(train[,-"SaleType")
View(filter(train,... = -"SaleType"))
View(select(train,... = -"SaleType"))
OverAllData <- function(tr,te){rbind(tr[,1:dim(tr)[2]-1],te)}
combineData <- OverAllData(train,test)
dim(combineData)
dim(train)+dim(test)
View(combineData)
View(combineData)
sapply(lapply(combineData,is.na),sum)
sapply(lapply(combineData,is.na),sum)>0
filter(sapply(lapply(combineData,is.na),sum), >0)
sapply(lapply(combineData,is.na),sum)
sapply(lapply(combineData,is.na),sum)[sapply(lapply(combineData,is.na),sum)>0]
NaCol <- function(dt){sapply(lapply(dt,is.na),sum)[sapply(lapply(dt,is.na),sum)>0]
}
NaData <- NaCol(combineData)
NaData
names(NaData)
View(combineData[,names(NaData)])
structure(combineData[,names(NaData)])
glimpse(combineData[,names(NaData)])
sapply(combineData[,names(NaData)], class)
View(sapply(combineData[,names(NaData)], class))
dim(combineData[,names(NaData)])
View(combineData[,names(NaData)])
NaData
NaNumber <- NaCol(combineData)
NaNumber
remove(NaData)
NaRes <- function(dt,NaNumber){}
NaRes <- function(dt,NaNumber){
remove(NaRes())
remove(NaRes)
NaData <- combineData[,names(NaNumber)]
View(NaData)
sapply(NaData, class)
is.numeric(sapply(NaData, class))
is.character(sapply(NaData, class))
sapply(NaData, class)=="character"
charClassNa <- sapply(NaData, class)[sapply(NaData, class)=="character"]
charClassNa
charClassNa <- names(sapply(NaData, class)[sapply(NaData, class)=="character"])
charClassNa
NumClassNa <- names(sapply(NaData, class)[sapply(NaData, class)=="numeric"])
NumClassNa
View(combineData[,NumClassNa])
is.na(combineData[,NumClassNa])
combineData[,NumClassNa][is.na(combineData[,NumClassNa])]
sum(combineData[,NumClassNa])
sum(combineData[,NumClassNa],na.rm = TRUE)
dd <- combineData[,NumClassNa]$LotFrontage
view(dd)
view(dd)
View(dd)
if_else(is.na(dd),mean(dd,na.rm = TRUE),dd)
View(if_else(is.na(dd),mean(dd,na.rm = TRUE),dd))
mean(combineData[,NumClassNa],na.rm = TRUE)
dd <- combineData[,NumClassNa]
view(dd[1])
view(dd[,1])
View(dd[,1])
length(dd)
for (i in 1:length(dd)) {
dd[,i] <- if_else(is.na(dd[,i]),mean(dd[,i],na.rm = TRUE),dd[,i])
}
for (i in 1:length(dd)) {
dd[,i] <- if_else(is.na(dd[,i]),mean(dd[,i],na.rm = TRUE),dd[,i])
}
for (i in 1:length(dd)) {
dd[,i] <- if_else(is.na(dd[,i]),mean(dd[,i],na.rm = TRUE),dd[,i])
}
for (i in 1:length(dd)) {
dd[,i] <- if_else(is.na(dd[,i]),mean(dd[,i],na.rm = TRUE),dd[,i])
for (i in 1:length(dd)) {
for (i in 1:length(dd)) {
temp <- as.vector(dd[,i])
dd[,i] <- if_else(is.na(temp),mean(temp,na.rm = TRUE),temp])
for (i in 1:length(dd)) {
temp <- as.vector(dd[,i])
dd[,i] <- if_else(is.na(temp),mean(temp,na.rm = TRUE),temp)
}
rlang::last_error()
summary(rlang::last_error())
class(dd[,1])
as.vector(dd[,1])
class(as.vector(dd[,1]))
dd[[]][[1]]
dd[][1]
class(dd[][1])
class(dd[][[1]])
dd[][[1]]
dd[[]][[1]]
dd[[1]][[1]]
dd[1][[1]]
for (i in 1:length(dd)) {
dd[][[i]] <- if_else(is.na(dd[][[i]]),mean(dd[][[i]],na.rm = TRUE),dd[][[i]])
}
View(dd)
class(dd[][])
class(dd[[]][])
class(dd[[1]][])
class(dd[1][])
class(dd[1][1])
class(dd[1][[1]])
NumClassNa
View(NaData)
NaCol
NaNumber
fillMisvalue <- function(dt,NaNumber){
naData <- combineData[,names(NaNumber)]
NaClassNum <- names(sapply(naData,class)[sapply(naData,class)=="numeric"])
NaClassChar <- names(sapply(naData,class)[sapply(naData,class)=="character"])
for (c in names(NaNumber)) {
fillMisvalue <- function(dt,NaNumber){
naData <- combineData[,names(NaNumber)]
NaClassNum <- names(sapply(naData,class)[sapply(naData,class)=="numeric"])
NaClassChar <- names(sapply(naData,class)[sapply(naData,class)=="character"])
for (c in NaClassNum) {
combineData[][[c]] <- if_else(is.na(combineData[][[c]]),mean(combineData[][[c]],na.rm = TRUE),combineData[][[c]])
}
for (d in NaClassChar) {
combineData[][[d]] <- if_else(is.na(combineData[][[d]]),"none",combineData[][[d]])
}
fillMisvalue <- function(dt,NaNumber){
naData <- combineData[,names(NaNumber)]
fillMisvalue <- function(dt,NaNumber){
fillMisvalue <- function(dt,Nas){
naData <- dt[,names(Nas)]
NaClassNum <- names(sapply(naData,class)[sapply(naData,class)=="numeric"])
NaClassChar <- names(sapply(naData,class)[sapply(naData,class)=="character"])
for (c in NaClassNum) {
dt[][[c]] <- if_else(is.na(dt[][[c]]),mean(dt[][[c]],na.rm = TRUE),dt[][[c]])
}
for (d in NaClassChar) {
dt[][[d]] <- if_else(is.na(dt[][[d]]),"none",dt[][[d]])
}
}
NaCol
NaCol(combineData)
fillMisvalue(combineData,NaNumber)
View(combineData)
NaCol(combineData)
NaCol()
NaCol
remove(NumClassNa)
remove(NumCharNa)
remove(CharClassNa)
fillMisvalue
fillMisvalue <- function(dt){
Nas <- NaCol(dt)
naData <- dt[,names(Nas)]
NaClassNum <- names(sapply(naData,class)[sapply(naData,class)=="numeric"])
NaClassChar <- names(sapply(naData,class)[sapply(naData,class)=="character"])
for (c in NaClassNum) {
dt[][[c]] <- if_else(is.na(dt[][[c]]),mean(dt[][[c]],na.rm = TRUE),dt[][[c]])
}
for (d in NaClassChar) {
dt[][[d]] <- if_else(is.na(dt[][[d]]),"none",dt[][[d]])
}
return(dt)
}
View(fillMisvalue(combineData))
NaCol(combineData)
dim(fillMisvalue(combineData))
dim(combineData)
NaCol(fillMisvalue(combineData))
fillMisvalue((fillMisvalue(combineData)))
View(fillMisvalue((fillMisvalue(combineData))))
round(2)
round(2.00)
round(2.05)
fillMisvalue <- function(dt){
Nas <- NaCol(dt)
naData <- dt[,names(Nas)]
NaClassNum <- names(sapply(naData,class)[sapply(naData,class)=="numeric"])
NaClassChar <- names(sapply(naData,class)[sapply(naData,class)=="character"])
for (c in NaClassNum) {
dt[][[c]] <- if_else(is.na(dt[][[c]]),round(mean(dt[][[c]],na.rm = TRUE)),dt[][[c]])
}
for (d in NaClassChar) {
dt[][[d]] <- if_else(is.na(dt[][[d]]),"none",dt[][[d]])
}
return(dt)
}
combineData <- fillMisvalue(combineData)
View(combineData)
NaCol(combineData)
rep(x = 2,... = 5)
rep
help(rep)
rep(x = 2,times = 5)
rep(x = 2,times = 5,length.out = .5)
rep(x = 2,times = 5,length.out = 3)
rep(1:4, 2)
rep(1:4, each = 2)       # not the same.
seq(2)
seq(7)
seq(2,7)
seq(2,7,0.5)
seq(-2,7,0.5)
View(combineData[,1:10])
summary(combineData[,1:10])
str(combineData[,1:10])
v <- ''
v
v <- v + 2
v <- v + "2"
v <- c(v,"2")
v
v <- append(v,"2")
v
v <- paste(v,"2")
v
v < ''
v <- ''
v <- paste0(v,2)
v
v <- paste0(v,2)
v
v <- paste0(v,2,collapse = TRUE)
help("collapse")
help("paste")
(nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9))))
(nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9))))
(nth <- paste0(1:12, c("st", "nd", "rd", "th"))
)
paste0(1:12, c("st", "nd"))
paste0(1:12, paste0("st", "nd"))
remove(v)
v <- c(c,"2")
v
remove(v)
v <- c(v,"2")
unique(combineData$MSZoning)
unique(combineData$Street)
unique(combineData$Alley)
sum(if_else(combineData$Alley==combineData$Street),1,0)
sum(if_else(combineData$Alley==combineData$Street,1,0))
paste(month.abb, "is the", nth, "month of the year.", sep = "_*_")
paste(month.abb, "is the", nth, "month of the year.")
paste(month.abb, "is the", nth, "month of the year.",collapse = TRUE)
paste(month.abb, "is the", nth, "month of the year.",collapse = '')
month.abb
nth
unique(combineData$LotShape)
unique(combineData$LandContour)
unique(combineData$Utilities)
discreteCol <- names(combineData)
discreteCol[1:10]
remove(charClassNa)
discreteCol <- c("MSZoning","Street","Alley","LotShape","LandContour","Utilities")
View(combineData[,11:20])
unique(LotConfig)
unique(combineData$LotConfig)
unique(combineData$LandSlope)
unique(combineData$Neighborhood)
unique(combineData$Condition1)
unique(combineData$Condition2)
train %>% ggplot(aes(Neighborhood,SalePrice)) + geom_col(aes(fill = Neighborhood))
train %>% ggplot(aes(Neighborhood,SalePrice)) + geom_point()
train %>% ggplot(aes(Neighborhood,SalePrice)) + geom_col(aes(fill = Neighborhood))
train %>% ggplot(aes(Neighborhood,SalePrice)) + geom_point()
unique(combineData$BldgType)
train %>% ggplot(aes(YearBuilt,SalePrice)) + geom_col(aes(fill = YearBuilt))
summary(combineData$YearBuilt)
train %>% ggplot(aes(YearBuilt)) + geom_histogram()
train %>% ggplot(aes(YearBuilt)) + geom_histogram(stat = identity)
train %>% ggplot(aes(YearBuilt)) + geom_bar()
train %>% ggplot(aes(YearBuilt)) + geom_bar(fill = YearBuilt)
train %>% ggplot(aes(YearBuilt)) + geom_bar(aes(fill = YearBuilt))
train %>% ggplot(aes(YearBuilt)) + geom_bar(aes(col = YearBuilt))
unique(combineData$YearBuilt)
discreteCol <- c(discreteCol,"LotConfig","LandSlope","Neighborhood","Condition1","Condition2","BldgType","HouseStyle")
discreteCol
View(combineData[,21:30])
discreteCol <- c(discreteCol,"RoofStyle","RoofMatl","Exterior1st","Exterior2nd","MasVnrType","ExterQual","ExterCond","Foundation")
View(combineData[,31:40])
discreteCol <- c(discreteCol,"BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","Heating")
View(combineData[,41:50])
discreteCol <- c(discreteCol,"HeatingQC","CentralAir","Electrical")
View(combineData[,51:60])
discreteCol <- c(discreteCol,"KitchenQual","Functional","FireplaceQu","GarageType")
View(combineData[,61:70])
discreteCol <- c(discreteCol,"GarageFinish","GarageQual","GarageCond","PavedDrive")
View(combineData[,71:80])
discreteCol <- c(discreteCol,"PoolQC","Fence","MiscFeature","SaleType","SaleCondition")
discreteCol
combineData[,discreteCol]
View(combineData[,discreteCol])
View(combineData %>% spread(key = "MSZoning",value = "MSZoning"))
names(combineData %>% spread(key = "MSZoning",value = "MSZoning")
dim(combineData %>% spread(key = "MSZoning",value = "MSZoning")
d
dim(combineData %>% spread(key = "MSZoning",value = "MSZoning"))
spreadOutCol <- function(dt,dcName){
spreadOutCol <- function(dt,dcName){
for (c in dcName) {
dt <- dt %>% spread(key = c,value = c)
}
return(dt)
}
View(spreadOutCol(combineData,discreteCol))
dim(spreadOutCol(combineData,discreteCol))
dim(combineData)
remove(nth)
remove(nadataPer)
NaCol(spreadOutCol(combineData,discreteCol))
fillMisvalue
names(sapply(combineData[,names(NaCol(combineData))],class)[sapply(combineData[,names(NaCol(combineData))],class)=="character"])
names(NaCol(spreadOutCol(combineData,discreteCol)))=="none"
sum(combineData$SaleType=="none")
which(combineData$SaleType=="none")
View(temp)
remove(temp)
remove(dd)
remove(NaData)
View(combineData %>% spread(PoolQC,PoolQC))
View(combineData %>% spread(PoolQC,PoolQC) %>% spread(Fence,Fence))
t <- combineData %>% spread(PoolQC,PoolQC)
View(t)
View(t %>% spread(Fence,Fence))
View(t)
r <- combineData %>% spread(Fence,Fence)
View(r)
cbind(t,r)
View(cbind(t,r))
combineData[1:10,1:10]
combineData[1:10,] %>% select(-Utilities)
combineData[1:10,] %>% select(-X)
combineData[1:10,] %>% select(-c("Utilities"))
combineData[1:10,] %>% select(-c("Utilities","X"))
dd
dd <- data.frame(x = c(1,2,3))
dd
cbind(dd,x = c(1,2,5))
dd <- cbind(dd,x = c(1,2,5))
dd
dd <- cbind(dd,x = c(9,3,7))
dd
select(dd,"x")
select(dd,-"x")
dd <- cbind(dd,y = c(1,3,8))
select(dd,"y")
dd
select(combineData,"Utilities")
select(dd,-"y")
rlang::last_error()
summary(rlang::last_error())
fillMisvalue
spreadOutCol <- function(dt,dcName){
for (c in dcName) {
dt <- dt %>% spread(key = c,value = c)
}
dt <- fillMisBin(dt)
return(dt)
}
fillMisBin <- function(dt){
Nas <- NaCol(dt)
NaClassNum <- names(Nas)
for (c in NaClassNum) {
dt[][[c]] <- if_else(is.na(dt[][[c]]),1,0)
}
return(dt)
}
View(spreadOutCol(combineData))
View(spreadOutCol(combineData,discreteCol))
dim(train)+dim(test)
dim(spreadOutCol(combineData,discreteCol))
combineData <- spreadOutCol(combineData,discreteCol)
combineData <- combineData %>% select(-none)
dim(combineData)
remove(r)
remove(t)
remove(dd)
finaltrain <- cbind(combineData[1:dim(train)[1],],train[,dim(train)[2]])
dim(finaltrain)
dim(train)
finaltrain <- combineData[dim(train)[1]+1:dim(combineData[1]),]
dim(train)[1]
dim(train)[1]+1
finaltrain <- combineData[dim(train)[1]+1:dim(combineData)[1],]
finaltrain <- cbind(combineData[1:dim(train)[1],],train[,dim(train)[2]])
finaltest <- combineData[dim(train)[1]+1:dim(combineData)[1],]
dim(finaltrain)
dim(finaltest)
finaltest <- combineData[dim(train)[1]+1:dim(combineData)[1],]
dim(finaltest)
dim(train)[1]+1
finaltest <- combineData[(dim(train)[1]+1):dim(combineData)[1],]
dim(finaltest)
write_tsv(x = finaltrain,path = "C:\\Users\\mehul\\OneDrive\\Desktop\\new_data_house_sale_prediction\\finaltrain" , col_names = FALSE)
write.table(x = finaltrain,file = "C:\\Users\\mehul\\OneDrive\\Desktop\\new_data_house_sale_prediction\\finaltrain.txt",col.names = FALSE,row.names = FALSE,sep = "\t")
finaltest <- finaltest[,-1]
finaltrain <- finaltest[,-1]
write.table(x = finaltrain,file = "C:\\Users\\mehul\\OneDrive\\Desktop\\new_data_house_sale_prediction\\finaltrain.txt",col.names = FALSE,row.names = FALSE,sep = "\t")
write.table(x = finaltest,file = "C:\\Users\\mehul\\OneDrive\\Desktop\\new_data_house_sale_prediction\\finaltest.txt",col.names = FALSE,row.names = FALSE,sep = "\t")
quit()
library(tidyverse)
dim(finaltrain)
dim(finaltest)
finaltrain <- cbind(combineData[1:dim(train)[1],],train[,dim(train)[2]])
finaltrain <- finaltrain[,-1]
dim(finaltrain)
write.table(x = finaltrain,file = "C:\\Users\\mehul\\OneDrive\\Desktop\\new_data_house_sale_prediction\\finaltrain.txt",col.names = FALSE,row.names = FALSE,sep = "\t")
quit
quit(y)
